import 'dart:convert';

import 'package:appmetrica_plugin/appmetrica_plugin.dart';
import 'package:flutter/material.dart';
import '../author.dart';
import '../post.dart';
import '../publication_utils.dart';
import '../token_storage.dart';
import 'bottom_navigation_bar.dart';
import 'bottom_navigation_logic.dart';
import 'comments.dart';
import 'custom_page_route.dart';
import 'lenta.dart';
import 'login.dart';
import 'package:http/http.dart' as http;


class Profile extends StatefulWidget {
  final Author author;

  Profile({required this.author});

  @override
  State<Profile> createState() => _ProfileState();
}

class _ProfileState extends State<Profile> with TickerProviderStateMixin {
  late TabController _tabController;
  List<Post> posts = []; // –°–æ–∑–¥–∞–µ–º —Å–ø–∏—Å–æ–∫ –ø–æ—Å—Ç–æ–≤ –∏ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –µ–≥–æ –ø—É—Å—Ç—ã–º —Å–ø–∏—Å–∫–æ–º


  @override
  void initState() {
    super.initState();
    _tabController = TabController(length: 1, vsync: this);
    getPosts(widget.author).then((fetchedPosts) {
      // –ü–æ—Å–ª–µ –ø–æ–ª—É—á–µ–Ω–∏—è –ø–æ—Å—Ç–æ–≤ –æ–±–Ω–æ–≤–ª—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –≤–∏–¥–∂–µ—Ç–∞
      setState(() {
        posts = fetchedPosts;
      });
    }).catchError((error) {
      // –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –æ—à–∏–±–∫—É –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –ø–æ—Å—Ç–æ–≤
      showDialog(
        context: context,
        builder: (BuildContext context) {
          return AlertDialog(
            title: Text('–û—à–∏–±–∫–∞'),
            content: Text(error.toString()),
            actions: [
              TextButton(
                onPressed: () {
                  Navigator.of(context).pop();
                },
                child: Text('OK'),
              ),
            ],
          );
        },
      );
    });
  }

  Future<List<Post>> getPosts(Author author) async {
    // –ü–æ–ª—É—á–∞–µ–º ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ –æ–±—ä–µ–∫—Ç–∞ –∞–≤—Ç–æ—Ä–∞
    int userId = author.userId;
    var token = await TokenStorage.getToken();
    return PublicationUtils.fetchPublications('http://46.19.66.10:8080/publications/user/$userId', token!, context);
  }

  @override
  Widget build(BuildContext context) {
    return Scaffold(
      backgroundColor: Color(0xFFDCFED7),
      body: ListView(
        children: [
          SafeArea(
            child: Column(
              crossAxisAlignment: CrossAxisAlignment.stretch,
              mainAxisAlignment: MainAxisAlignment.center,
              children: [
                Container(
                  margin: EdgeInsets.fromLTRB(16, 10, 16, 0),
                  padding: EdgeInsets.all(16),
                  decoration: BoxDecoration(
                    color: Color(0xFFF5FFF3),
                    borderRadius: BorderRadius.circular(20),
                    border: Border.all(color: Colors.grey.shade300, width: 1),
                  ),
                  child: Row(
                    crossAxisAlignment: CrossAxisAlignment.center,
                    children: [
                      Column(
                        crossAxisAlignment: CrossAxisAlignment.center,
                        children: [
                          SizedBox(height: 10),
                          ClipOval(
                            child: Image.memory(
                              base64.decode(widget.author.userImage),
                              width: 120,
                              height: 120,
                              fit: BoxFit.cover,
                            ),
                          ),

                          SizedBox(height: 8),
                          Text(
                            widget.author.username,
                            style: TextStyle(fontSize: 22),
                          ),
                        ],
                      ),
                      SizedBox(width: 16),
                      Column(
                        crossAxisAlignment: CrossAxisAlignment.start,
                        children: [
                          Text(
                            '–ü–æ–¥–ø–∏—Å–æ–∫: 12',
                            style: TextStyle(color: const Color(0xFF4c4c4c), fontFamily: 'Roboto', fontSize: 20),
                          ),
                          SizedBox(height: 4),
                          Text(
                            '–ü–æ–¥–ø–∏—Å—á–∏–∫–æ–≤: 100',
                            style: TextStyle(color: const Color(0xFF4c4c4c), fontFamily: 'Roboto', fontSize: 20),
                          ),
                          SizedBox(height: 6),
                          InkWell(
                            onTap: () {
                              AppMetrica.reportEvent('Click on "Edit profile" button');
                              _showEditProfileDialog();
                            },
                            child: Container(
                              padding: EdgeInsets.symmetric(horizontal: 7, vertical: 4),
                              decoration: BoxDecoration(
                                color: const Color(0xFF5fc16f),
                                borderRadius: BorderRadius.circular(5),
                              ),
                              child: Row(
                                children: [
                                  Icon(Icons.edit, color: const Color(0xFF333333)),
                                  SizedBox(width: 2),
                                  Text('–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å', style: TextStyle(color: const Color(0xFF333333), fontFamily: 'Roboto', fontSize: 18)),
                                ],
                              ),
                            ),
                          ),
                          SizedBox(height: 8),
                          InkWell(
                            onTap: () {
                              AppMetrica.reportEvent('Click on "Quit" button');
                              Navigator.pushReplacement(
                                context,
                                CustomPageRoute(page: Login()),
                              );
                            },
                            child: Container(
                              padding: EdgeInsets.symmetric(horizontal: 7, vertical: 4),
                              decoration: BoxDecoration(
                                color: const Color(0xFF5fc16f),
                                borderRadius: BorderRadius.circular(5),
                              ),
                              child: Row(
                                children: [
                                  Icon(Icons.exit_to_app, color: const Color(0xFF333333)),
                                  SizedBox(width: 2),
                                  Text('–í—ã–π—Ç–∏', style: TextStyle(color: const Color(0xFF333333), fontFamily: 'Roboto', fontSize: 18)),
                                ],
                              ),
                            ),
                          ),
                        ],
                      ),
                    ],
                  ),
                ),
                SizedBox(height: 8),
                // –ë–ª–æ–∫ "–°–ø–∏—Å–æ–∫ –∑–Ω–∞—á–∫–æ–≤" —Å –∑–∞—Å–ª—É–≥–∞–º–∏ –≤–ª–∞–¥–µ–ª—å—Ü–∞ –ø—Ä–æ—Ñ–∏–ª—è
                Container(
                  margin: EdgeInsets.fromLTRB(16, 10, 16, 0),
                  padding: EdgeInsets.all(16),
                  decoration: BoxDecoration(
                    color: Color(0xFFF5FFF3),
                    borderRadius: BorderRadius.circular(20),
                    border: Border.all(color: Colors.grey.shade300, width: 1),
                  ),
                  child: Column(
                    crossAxisAlignment: CrossAxisAlignment.stretch,
                    children: [
                      Center(
                        child: Padding(
                          padding: EdgeInsets.symmetric(vertical: 3),
                          child: Text(
                            '–°–ø–∏—Å–æ–∫ –∑–Ω–∞—á–∫–æ–≤',
                            style: TextStyle(fontSize: 24),
                          ),
                        ),
                      ),
                      Divider(
                        color: Colors.grey,
                        thickness: 1,
                      ),
                      SizedBox(height: 15),
                      Row(
                        children: [
                          Text(
                            'üéâ',
                            style: TextStyle(fontSize: 18),
                          ),
                          SizedBox(width: 8),
                          Text(
                            '–õ—É—á—à–∏–π –∏–Ω—Ñ–ª—é–µ–Ω—Å–µ—Ä',
                            style: TextStyle(fontSize: 20),
                          ),
                        ],
                      ),
                      SizedBox(height: 15),
                      Row(
                        children: [
                          Text(
                            'ü•∏',
                            style: TextStyle(fontSize: 18),
                          ),
                          SizedBox(width: 8),
                          Text(
                            '–¢–æ–ø-10 –ø–æ –∞–¥–µ–∫–≤–∞—Ç–Ω–æ—Å—Ç–∏',
                            style: TextStyle(fontSize: 20),
                          ),
                        ],
                      ),
                      SizedBox(height: 15),
                      Row(
                        children: [
                          Text(
                            'üêò',
                            style: TextStyle(fontSize: 18),
                          ),
                          SizedBox(width: 8),
                          Text(
                            '–ó–∞—â–∏—Ç–Ω–∏–∫ –∂–∏–≤–æ—Ç–Ω—ã—Ö',
                            style: TextStyle(fontSize: 20),
                          ),
                        ],
                      ),
                    ],

                  ),

                ),
                SizedBox(height: 8),
                // –ë–ª–æ–∫ –ª–µ–Ω—Ç—ã —Å –ø–æ—Å—Ç–∞–º–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
                ListView.builder(
                  shrinkWrap: true,
                  physics: NeverScrollableScrollPhysics(),
                  itemCount: posts.length,
                  itemBuilder: (context, index) {
                    final post = posts[index];
                    return Card(
                      color: Color(0xFFF5FFF3),
                      margin: EdgeInsets.symmetric(vertical: 8, horizontal: 16),
                      shape: RoundedRectangleBorder(
                        borderRadius: BorderRadius.circular(16),
                        side: BorderSide(color: Colors.grey.shade300, width: 1),
                      ),
                      child: Padding(
                        padding: EdgeInsets.all(16),
                        child: Column(
                          crossAxisAlignment: CrossAxisAlignment.stretch,
                          children: [
                            Row(
                              mainAxisAlignment: MainAxisAlignment.spaceBetween,
                              children: [
                                Row(
                                  children: [
                                    ClipOval(
                                      child: Image.memory(
                                        base64.decode(post.author.userImage),
                                        width: 50,
                                        height: 50,
                                        fit: BoxFit.cover,
                                      ),
                                    ),
                                    SizedBox(width: 8),
                                    Text(
                                      post.author.username,
                                      style: TextStyle(fontSize: 25),
                                    ),
                                    SizedBox(width: 8),
                                  ],
                                ),
                                ElevatedButton(
                                  onPressed: () {
                                    AppMetrica.reportEvent('Click on "Delete post" button');
                                    _showDeleteConfirmationDialog(index);
                                  },

                                  style: ElevatedButton.styleFrom(
                                    primary: Color(0xFFe08684),
                                    shape: RoundedRectangleBorder(
                                      borderRadius: BorderRadius.circular(8),
                                      side: BorderSide(color: Colors.black),
                                    ),
                                  ),
                                  child: Padding(
                                    padding: const EdgeInsets.all(8.0),
                                    child: Text(
                                      '–£–¥–∞–ª–∏—Ç—å',
                                      style: TextStyle(fontSize: 14, color: Colors.black),
                                    ),
                                  ),
                                ),

                              ],
                            ),
                            SizedBox(height: 15),
                            Text(
                              post.title,
                              style: TextStyle(fontWeight: FontWeight.bold, fontSize: 25),
                            ),
                            SizedBox(height: 15),
                            Text(
                              post.text,
                              style: TextStyle(fontSize: 18),
                            ),
                            SizedBox(height: 15),
                            if ((post.image != null) && (post.image != ''))
                              Container(
                                decoration: BoxDecoration(
                                  borderRadius: BorderRadius.circular(7),
                                ),
                                child: ClipRRect(
                                  borderRadius: BorderRadius.circular(7),
                                  child: Image.memory(
                                    base64.decode(post.image!),
                                    fit: BoxFit.cover,
                                  ),
                                ),
                              ),
                            SizedBox(height: 8),
                            Row(
                              mainAxisAlignment: MainAxisAlignment.spaceBetween,
                              children: [
                                Row(
                                  children: [
                                    Text(
                                      '${post.rating}',
                                      style: TextStyle(fontWeight: FontWeight.bold),
                                    ),
                                    SizedBox(width: 16),
                                    Row(
                                      children: [
                                        IconButton(
                                          onPressed: () {
                                            AppMetrica.reportEvent('Click on "Like" button');
                                          },
                                          icon: Icon(Icons.thumb_up),
                                        ),
                                        IconButton(
                                          onPressed: () {
                                            AppMetrica.reportEvent('Click on "Dislike" button');
                                          },
                                          icon: Icon(Icons.thumb_down),
                                        ),
                                      ],
                                    ),
                                  ],
                                ),
                                IconButton(
                                  onPressed: () {
                                    AppMetrica.reportEvent('Click on "Comments" button');
                                    Navigator.push(
                                      context,
                                      CustomPageRoute(
                                        page: Comments(),
                                      ),
                                    );
                                  },
                                  icon: Icon(Icons.message),
                                ),
                              ],
                            ),
                            SizedBox(height: 8),

                            Wrap(
                              spacing: 8,
                              children: post.tags.map((tag) {
                                return Container(
                                  padding: EdgeInsets.symmetric(horizontal: 8, vertical: 4),
                                  decoration: BoxDecoration(
                                    color: Colors.white,
                                    borderRadius: BorderRadius.circular(7),
                                    border: Border.all(color: Colors.grey),
                                  ),
                                  child: Text(
                                    tag,
                                    style: TextStyle(color: Colors.green),
                                  ),
                                );
                              }).toList(),
                            ),
                          ],
                        ),
                      ),
                    );
                  },
                ),

              ],
            ),
          ),
        ],
      ),
      bottomNavigationBar: CustomBottomNavigationBar(
        onTap: (index) {
          BottomNavigationLogic.handleNavigation(context, index);
        },
      ),
    );
  }

  void _deletePost(int index) async {
    try {
      var postId = posts[index].id;
      var token = await TokenStorage.getToken();
      // –°–æ–∑–¥–∞–Ω–∏–µ URL –¥–ª—è DELETE –∑–∞–ø—Ä–æ—Å–∞
      print(postId);
      var deleteUrl = Uri.parse('http://46.19.66.10:8080/publications/$postId');

      // –û—Ç–ø—Ä–∞–≤–∫–∞ DELETE –∑–∞–ø—Ä–æ—Å–∞
      var response = await http.delete(
        deleteUrl,
        headers: <String, String>{
          'Content-Type': 'application/json; charset=UTF-8',
          'Authorization': 'Bearer $token',
        },
      );

      // –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç–∞—Ç—É—Å–∞ –æ—Ç–≤–µ—Ç–∞
      if (response.statusCode == 204) {
        // –£—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω–æ, –æ–±–Ω–æ–≤–∏—Ç–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ
        setState(() {
          posts.removeAt(index);
        });
      } else {
        // –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–∫–∏ —É–¥–∞–ª–µ–Ω–∏—è
        print('–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –ø—É–±–ª–∏–∫–∞—Ü–∏–∏: ${response.statusCode}');
      }
    } catch (e) {
      // –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–∫–∏
      print('–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –ø—É–±–ª–∏–∫–∞—Ü–∏–∏: $e');
    }
  }

  // –ú–µ—Ç–æ–¥ –¥–ª—è –ø–æ–∫–∞–∑–∞ –¥–∏–∞–ª–æ–≥–æ–≤–æ–≥–æ –æ–∫–Ω–∞ —É–¥–∞–ª–µ–Ω–∏—è –ø–æ—Å—Ç–∞
  void _showDeleteConfirmationDialog(int index) {
    showDialog(
      context: context,
      builder: (BuildContext context) {
        return AlertDialog(
          title: Text("–í—ã —Ç–æ—á–Ω–æ —Ö–æ—Ç–∏—Ç–µ —É–¥–∞–ª–∏—Ç—å –ø—É–±–ª–∏–∫–∞—Ü–∏—é?"),
          actions: <Widget>[
            TextButton(
              onPressed: () {
                AppMetrica.reportEvent('Click on "Cancel delete" button');
                Navigator.of(context).pop();
              },
              child: Text("–ù–µ—Ç"),
            ),
            TextButton(
              onPressed: () {
                AppMetrica.reportEvent('Click on "Confirm delete" button');
                _deletePost(index); // –£–¥–∞–ª—è–µ–º –ø–æ—Å—Ç
                Navigator.of(context).pop(); // –ó–∞–∫—Ä—ã–≤–∞–µ–º –¥–∏–∞–ª–æ–≥–æ–≤–æ–µ –æ–∫–Ω–æ
              },
              child: Text("–î–∞"),
            ),
          ],
        );
      },
    );
  }

  // –ú–µ—Ç–æ–¥ –¥–ª—è –ø–æ–∫–∞–∑–∞ –¥–∏–∞–ª–æ–≥–æ–≤–æ–≥–æ –æ–∫–Ω–∞ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Å–≤–æ–µ–≥–æ –ø—Ä–æ—Ñ–∏–ª—è
  void _showEditProfileDialog() {
    TextEditingController emailController = TextEditingController();

    showDialog(
      context: context,
      builder: (BuildContext context) {
        return AlertDialog(
          backgroundColor: Color(0xFFDCFED7), // –§–æ–Ω –æ–∫–Ω–∞
          titlePadding: EdgeInsets.zero, // –£–±–∏—Ä–∞–µ–º –æ—Ç—Å—Ç—É–ø—ã –∑–∞–≥–æ–ª–æ–≤–∫–∞
          contentPadding: EdgeInsets.symmetric(horizontal: 24.0), // –û—Ç—Å—Ç—É–ø—ã –∫–æ–Ω—Ç–µ–Ω—Ç–∞ —Å–ª–µ–≤–∞ –∏ —Å–ø—Ä–∞–≤–∞
          content: Column(
            mainAxisSize: MainAxisSize.min,
            crossAxisAlignment: CrossAxisAlignment.stretch,
            children: [
              SizedBox(height: 20),
              Stack(
                alignment: Alignment.center,
                children: [
                  Container(
                    width: 100,
                    height: 100,
                    decoration: BoxDecoration(
                      shape: BoxShape.circle,
                      image: DecorationImage(
                        fit: BoxFit.cover,
                        image: NetworkImage(
                          'https://i.pinimg.com/originals/2b/64/2f/2b642f9183fa80b8c47a9d8f8971eb4d.jpg',
                        ),
                      ),
                    ),
                  ),
                  Positioned(
                    bottom: 0,
                    child: Container(
                      width: 100,
                      height: 100,
                      decoration: BoxDecoration(
                        color: Colors.black.withOpacity(0.5), // –ó–∞—Ç–µ–º–Ω—ë–Ω–Ω—ã–π —Ñ–æ–Ω
                        shape: BoxShape.circle,
                      ),
                      child: IconButton(
                        icon: Icon(Icons.edit, color: Colors.white, size: 30), // –ó–Ω–∞–∫ –∫–∞—Ä–∞–Ω–¥–∞—à–∞
                        onPressed: () {
                          // –î–µ–π—Å—Ç–≤–∏—è –ø—Ä–∏ –Ω–∞–∂–∞—Ç–∏–∏ –Ω–∞ –∫–∞—Ä–∞–Ω–¥–∞—à
                          // –ú–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –≤—ã–±–æ—Ä –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –∏–∑ –≥–∞–ª–µ—Ä–µ–∏ –∏–ª–∏ –∫–∞–º–µ—Ä—ã
                        },
                      ),
                    ),
                  ),
                ],
              ),
              SizedBox(height: 20),
              Column(
                crossAxisAlignment: CrossAxisAlignment.start,
                children: [
                  Container(
                    margin: EdgeInsets.symmetric(horizontal: 10.0), // –û—Ç—Å—Ç—É–ø—ã —Å–ª–µ–≤–∞ –∏ —Å–ø—Ä–∞–≤–∞
                    child: Column(
                      crossAxisAlignment: CrossAxisAlignment.start,
                      children: [
                        Text(
                          'Email',
                          style: TextStyle(
                            fontSize: 16.0,
                            fontWeight: FontWeight.bold,
                            color: Colors.grey, // –°–µ—Ä—ã–π —Ü–≤–µ—Ç –¥–ª—è –Ω–∞–¥–ø–∏—Å–∏
                          ),
                        ),
                        SizedBox(height: 10.0), // –û—Ç—Å—Ç—É–ø –º–µ–∂–¥—É –Ω–∞–¥–ø–∏—Å—å—é –∏ –ø–æ–ª–µ–º –≤–≤–æ–¥–∞
                        Container(
                          decoration: BoxDecoration(
                            color: Colors.white,
                            borderRadius: BorderRadius.circular(10.0),
                          ),
                          child: TextField(
                            controller: emailController,
                            decoration: InputDecoration(
                              hintText: '–í–≤–µ–¥–∏—Ç–µ –≤–∞—à Email...',
                              contentPadding: EdgeInsets.all(10.0),
                              border: OutlineInputBorder(
                                borderRadius: BorderRadius.circular(10.0),
                              ),
                            ),
                          ),
                        ),
                      ],
                    ),
                  ),
                ],
              ),
            ],
          ),
          actions: <Widget>[
            Container(
              margin: EdgeInsets.symmetric(horizontal: 24.0, vertical: 24.0), // –û—Ç—Å—Ç—É–ø—ã —Å–ª–µ–≤–∞, —Å–ø—Ä–∞–≤–∞, —Å–≤–µ—Ä—Ö—É –∏ —Å–Ω–∏–∑—É
              child: ElevatedButton(
                onPressed: () {
                  // –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –∏–∑–º–µ–Ω–µ–Ω–∏–π
                  // –ú–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –∫–æ–¥ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –ø—Ä–æ—Ñ–∏–ª—è
                  Navigator.of(context).pop();
                },
                style: ElevatedButton.styleFrom(
                  primary: Color(0xFF5fc16f), // –ó–µ–ª—ë–Ω—ã–π —Ü–≤–µ—Ç
                  minimumSize: Size(double.infinity, 50), // –ú–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–µ —Ä–∞–∑–º–µ—Ä—ã –∫–Ω–æ–ø–∫–∏
                ),
                child: Text('–°–æ—Ö—Ä–∞–Ω–∏—Ç—å', style: TextStyle(fontSize: 16)),
              ),
            ),
          ],
        );
      },
    );
  }

}